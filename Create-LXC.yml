---
- name: Create new LXC container in Proxmox
  hosts: localhost
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3

    # Proxmox API credentials
    api_host:       "192.168.1.150"
    api_user:       "root@pam"
    api_password:   "c0ff33"

    # Container settings
    proxmox_node:       "dragon"
    container_hostname: "ansible"
    container_password: "c0ff33"
    ostemplate:         "local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst"

    # LXC‐enabled storage
    storage:    "local-lvm"
    disk:       8       # GB
    memory:     512     # MB
    cpus:       1
    cpuunits:   1024
    nameserver: "192.168.1.254"

  tasks:
    - name: Generate octet list 156–165
      ansible.builtin.set_fact:
        candidate_octets: "{{ lookup('ansible.builtin.sequence','start=156 end=165', wantlist=True) }}"

    - name: Build candidate IPs
      ansible.builtin.set_fact:
        candidate_ips: "{{ candidate_octets | map('regex_replace','^(.*)$','192.168.1.\\1') | list }}"

    - name: Ping each candidate to find a free IP
      ansible.builtin.command:
        cmd: "timeout 1 ping -c1 -W1 {{ item }}"
      register: ping_results
      loop: "{{ candidate_ips }}"
      loop_control:
        label: "{{ item }}"
      ignore_errors: true
      failed_when: false
      changed_when: false

    - name: Pick the first non-responding IP
      ansible.builtin.set_fact:
        free_ip: "{{ item.item }}"
      loop: "{{ ping_results.results }}"
      loop_control:
        label: "{{ item.item }}"
      when:
        - item.rc != 0            # non-zero return → treat as free
        - free_ip is not defined
      run_once: true

    - name: Debug chosen free_ip
      ansible.builtin.debug:
        var: free_ip

    - name: Set vmid to the last octet of the free IP
      ansible.builtin.set_fact:
        vmid: "{{ free_ip.split('.')[-1] | int }}"

    - name: Debug vmid
      ansible.builtin.debug:
        var: vmid

    - name: Create LXC Container
      community.general.proxmox:
        api_host:       "{{ api_host }}"
        api_user:       "{{ api_user }}"
        api_password:   "{{ api_password }}"
        node:           "{{ proxmox_node }}"
        vmid:           "{{ vmid }}"
        hostname:       "{{ container_hostname }}"
        ostemplate:     "{{ ostemplate }}"
        storage:        "{{ storage }}"
        disk:           "{{ disk }}"
        memory:         "{{ memory }}"
        cpus:           "{{ cpus }}"
        cpuunits:       "{{ cpuunits }}"
        nameserver:     "{{ nameserver }}"
        password:       "{{ container_password }}"
        netif:
          net0: "name=eth0,bridge=vmbr0,ip={{ free_ip }}/24,gw={{ nameserver }},ip6=dhcp"
        unprivileged:   true
        state:          present
        validate_certs: false
      no_log: true

    - name: Start the LXC Container
      community.general.proxmox:
        api_host:       "{{ api_host }}"
        api_user:       "{{ api_user }}"
        api_password:   "{{ api_password }}"
        node:           "{{ proxmox_node }}"
        vmid:           "{{ vmid }}"
        state:          started
      no_log: true

    - name: Permit root login in the container’s SSH daemon
      delegate_to: "{{ api_host }}"
      become: true
      ansible.builtin.shell: |
        /usr/sbin/pct exec {{ vmid }} -- \
          sed -i 's|^#\?PermitRootLogin .*|PermitRootLogin yes|' /etc/ssh/sshd_config

    - name: Enable password authentication in the container’s SSH daemon
      delegate_to: "{{ api_host }}"
      become: true
      ansible.builtin.shell: |
        /usr/sbin/pct exec {{ vmid }} -- \
          sed -i 's|^#\?PasswordAuthentication .*|PasswordAuthentication yes|' /etc/ssh/sshd_config

    - name: Restart SSH inside the container
      delegate_to: "{{ api_host }}"
      become: true
      ansible.builtin.shell: |
        /usr/sbin/pct exec {{ vmid }} -- systemctl restart sshd
